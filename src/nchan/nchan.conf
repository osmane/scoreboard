server {
    listen 80;
    listen [::]:80;
    server_name localhost;

    # Publisher endpoint for the game - where the CORS error happens.
    location ~ ^/publish/table/(?<channel>[a-zA-Z0-9-]+)$ {
        # Handle the preflight OPTIONS request specifically for this location.
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://osmane.github.io' always;
            add_header 'Access-Control-Allow-Methods' 'POST, GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Length' 0;
            return 204;
        }

        # For the actual POST request.
        add_header 'Access-Control-Allow-Origin' 'https://osmane.github.io' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        nchan_publisher;
        nchan_channel_id $channel;
        nchan_message_buffer_length 1000;
    }

    # Publisher endpoint for the lobby
    location ~ ^/publish/lobby/(?<channel>\w+)$ {
        add_header 'Access-Control-Allow-Origin' '*' always;
        nchan_publisher;
        nchan_channel_id $channel;
        nchan_message_buffer_length 0;
    }

    # Subscriber endpoints (WebSocket)
    location ~ ^/subscribe/ {
        add_header 'Access-Control-Allow-Origin' '*' always;
        nchan_subscriber;
        nchan_channel_id $channel;
        nchan_message_buffer_length 0;
        nchan_message_timeout 0;
        nchan_subscriber_timeout 0;
        if ($uri ~* /subscribe/table/) {
            nchan_subscriber_first_message oldest;
        }
    }

    # Status endpoint for the lobby
    location = /basic_status {
        add_header 'Access-Control-Allow-Origin' '*' always;
        stub_status;
    }

    # Extended stats
    location /nchan_stats {
        nchan_stub_status;
    }
}